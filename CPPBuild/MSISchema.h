#pragma once

//
// Warning: this code has been autogenerated by the MSISchema::generateCode function
//

#include <vector>
#include <string>
#include <optional>
#include <cstdint>
#include "MSIDatabase.h"

class MSIActionText
{
public:
	std::string action;
	std::optional<std::string> description; // localizable
	std::optional<std::string> template_; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ActionText` (`Action` CHAR(72) NOT NULL, `Description` LONGCHAR LOCALIZABLE, `Template` LONGCHAR LOCALIZABLE PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIActionText>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ActionText` (`Action`, `Description`, `Template`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.description ? row.description.value() : "");
			view->setString(2, row.template_ ? row.template_.value() : "");
			view->execute();
		}
	}
};

class MSIAdminExecuteSequence
{
public:
	std::string action;
	std::optional<std::string> condition;
	std::optional<int> sequence;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `AdminExecuteSequence` (`Action` CHAR(72) NOT NULL, `Condition` CHAR(255), `Sequence` SHORT PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAdminExecuteSequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `AdminExecuteSequence` (`Action`, `Condition`, `Sequence`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIAdminUISequence
{
public:
	std::string action;
	std::optional<std::string> condition;
	std::optional<int> sequence;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `AdminUISequence` (`Action` CHAR(72) NOT NULL, `Condition` CHAR(255), `Sequence` SHORT PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAdminUISequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `AdminUISequence` (`Action`, `Condition`, `Sequence`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIAdvtExecuteSequence
{
public:
	std::string action;
	std::optional<std::string> condition;
	std::optional<int> sequence;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `AdvtExecuteSequence` (`Action` CHAR(72) NOT NULL, `Condition` CHAR(255), `Sequence` SHORT PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAdvtExecuteSequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `AdvtExecuteSequence` (`Action`, `Condition`, `Sequence`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIAdvtUISequence
{
public:
	std::string action;
	std::optional<std::string> condition;
	std::optional<int> sequence;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `AdvtUISequence` (`Action` CHAR(72) NOT NULL, `Condition` CHAR(255), `Sequence` SHORT PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAdvtUISequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `AdvtUISequence` (`Action`, `Condition`, `Sequence`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIAppId
{
public:
	std::string appId;
	std::optional<std::string> remoteServerName;
	std::optional<std::string> localService;
	std::optional<std::string> serviceParameters;
	std::optional<std::string> dllSurrogate;
	std::optional<int> activateAtStorage;
	std::optional<int> runAsInteractiveUser;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `AppId` (`AppId` CHAR(38) NOT NULL, `RemoteServerName` CHAR(255), `LocalService` CHAR(255), `ServiceParameters` CHAR(255), `DllSurrogate` CHAR(255), `ActivateAtStorage` SHORT, `RunAsInteractiveUser` SHORT PRIMARY KEY `AppId`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAppId>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `AppId` (`AppId`, `RemoteServerName`, `LocalService`, `ServiceParameters`, `DllSurrogate`, `ActivateAtStorage`, `RunAsInteractiveUser`) VALUES(?, ?, ?, ?, ?, ?, ?)", 7);
		for (auto& row : rows)
		{
			view->setString(0, row.appId);
			view->setString(1, row.remoteServerName ? row.remoteServerName.value() : "");
			view->setString(2, row.localService ? row.localService.value() : "");
			view->setString(3, row.serviceParameters ? row.serviceParameters.value() : "");
			view->setString(4, row.dllSurrogate ? row.dllSurrogate.value() : "");
			view->setInteger(5, row.activateAtStorage ? row.activateAtStorage.value() : MSI_NULL_INTEGER);
			view->setInteger(6, row.runAsInteractiveUser ? row.runAsInteractiveUser.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIAppSearch
{
public:
	std::string property;
	std::string signature;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `AppSearch` (`Property` CHAR(72) NOT NULL, `Signature_` CHAR(72) NOT NULL PRIMARY KEY `Property`, `Signature_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAppSearch>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `AppSearch` (`Property`, `Signature_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setString(1, row.signature);
			view->execute();
		}
	}
};

class MSIBBControl
{
public:
	std::string billboard;
	std::string bBControl;
	std::string type;
	int x = 0;
	int y = 0;
	int width = 0;
	int height = 0;
	std::optional<int> attributes;
	std::optional<std::string> text; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `BBControl` (`Billboard_` CHAR(50) NOT NULL, `BBControl` CHAR(50) NOT NULL, `Type` CHAR(50) NOT NULL, `X` SHORT NOT NULL, `Y` SHORT NOT NULL, `Width` SHORT NOT NULL, `Height` SHORT NOT NULL, `Attributes` LONG, `Text` CHAR(50) LOCALIZABLE PRIMARY KEY `Billboard_`, `BBControl`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIBBControl>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `BBControl` (`Billboard_`, `BBControl`, `Type`, `X`, `Y`, `Width`, `Height`, `Attributes`, `Text`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", 9);
		for (auto& row : rows)
		{
			view->setString(0, row.billboard);
			view->setString(1, row.bBControl);
			view->setString(2, row.type);
			view->setInteger(3, row.x);
			view->setInteger(4, row.y);
			view->setInteger(5, row.width);
			view->setInteger(6, row.height);
			view->setInteger(7, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->setString(8, row.text ? row.text.value() : "");
			view->execute();
		}
	}
};

class MSIBillboard
{
public:
	std::string billboard;
	std::string feature;
	std::optional<std::string> action;
	std::optional<int> ordering;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Billboard` (`Billboard` CHAR(50) NOT NULL, `Feature_` CHAR(38) NOT NULL, `Action` CHAR(50), `Ordering` SHORT PRIMARY KEY `Billboard`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIBillboard>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Billboard` (`Billboard`, `Feature_`, `Action`, `Ordering`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.billboard);
			view->setString(1, row.feature);
			view->setString(2, row.action ? row.action.value() : "");
			view->setInteger(3, row.ordering ? row.ordering.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIBinary
{
public:
	std::string name;
	MSIObject data;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Binary` (`Name` CHAR(72) NOT NULL, `Data` OBJECT NOT NULL PRIMARY KEY `Name`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIBinary>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Binary` (`Name`, `Data`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.name);
			view->setStream(1, row.data.filename);
			view->execute();
		}
	}
};

class MSIBindImage
{
public:
	std::string file;
	std::optional<std::string> path;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `BindImage` (`File_` CHAR(72) NOT NULL, `Path` CHAR(255) PRIMARY KEY `File_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIBindImage>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `BindImage` (`File_`, `Path`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setString(1, row.path ? row.path.value() : "");
			view->execute();
		}
	}
};

class MSICCPSearch
{
public:
	std::string signature;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `CCPSearch` (`Signature_` CHAR(72) NOT NULL PRIMARY KEY `Signature_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSICCPSearch>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `CCPSearch` (`Signature_`) VALUES(?)", 1);
		for (auto& row : rows)
		{
			view->setString(0, row.signature);
			view->execute();
		}
	}
};

class MSICheckBox
{
public:
	std::string property;
	std::optional<std::string> value;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `CheckBox` (`Property` CHAR(72) NOT NULL, `Value` CHAR(64) PRIMARY KEY `Property`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSICheckBox>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `CheckBox` (`Property`, `Value`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setString(1, row.value ? row.value.value() : "");
			view->execute();
		}
	}
};

class MSIClass
{
public:
	std::string cLSID;
	std::string context;
	std::string component;
	std::optional<std::string> progId_Default;
	std::optional<std::string> description; // localizable
	std::optional<std::string> appId;
	std::optional<std::string> fileTypeMask;
	std::optional<std::string> icon;
	std::optional<int> iconIndex;
	std::optional<std::string> defInprocHandler;
	std::optional<std::string> argument;
	std::string feature;
	std::optional<int> attributes;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Class` (`CLSID` CHAR(38) NOT NULL, `Context` CHAR(32) NOT NULL, `Component_` CHAR(72) NOT NULL, `ProgId_Default` CHAR(255), `Description` CHAR(255) LOCALIZABLE, `AppId_` CHAR(38), `FileTypeMask` CHAR(255), `Icon_` CHAR(72), `IconIndex` SHORT, `DefInprocHandler` CHAR(32), `Argument` CHAR(255), `Feature_` CHAR(38) NOT NULL, `Attributes` SHORT PRIMARY KEY `CLSID`, `Context`, `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIClass>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Class` (`CLSID`, `Context`, `Component_`, `ProgId_Default`, `Description`, `AppId_`, `FileTypeMask`, `Icon_`, `IconIndex`, `DefInprocHandler`, `Argument`, `Feature_`, `Attributes`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 13);
		for (auto& row : rows)
		{
			view->setString(0, row.cLSID);
			view->setString(1, row.context);
			view->setString(2, row.component);
			view->setString(3, row.progId_Default ? row.progId_Default.value() : "");
			view->setString(4, row.description ? row.description.value() : "");
			view->setString(5, row.appId ? row.appId.value() : "");
			view->setString(6, row.fileTypeMask ? row.fileTypeMask.value() : "");
			view->setString(7, row.icon ? row.icon.value() : "");
			view->setInteger(8, row.iconIndex ? row.iconIndex.value() : MSI_NULL_INTEGER);
			view->setString(9, row.defInprocHandler ? row.defInprocHandler.value() : "");
			view->setString(10, row.argument ? row.argument.value() : "");
			view->setString(11, row.feature);
			view->setInteger(12, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIComboBox
{
public:
	std::string property;
	int order = 0;
	std::string value;
	std::optional<std::string> text; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ComboBox` (`Property` CHAR(72) NOT NULL, `Order` SHORT NOT NULL, `Value` CHAR(64) NOT NULL, `Text` CHAR(64) LOCALIZABLE PRIMARY KEY `Property`, `Order`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIComboBox>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ComboBox` (`Property`, `Order`, `Value`, `Text`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setInteger(1, row.order);
			view->setString(2, row.value);
			view->setString(3, row.text ? row.text.value() : "");
			view->execute();
		}
	}
};

class MSICompLocator
{
public:
	std::string signature;
	std::string componentId;
	std::optional<int> type;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `CompLocator` (`Signature_` CHAR(72) NOT NULL, `ComponentId` CHAR(38) NOT NULL, `Type` SHORT PRIMARY KEY `Signature_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSICompLocator>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `CompLocator` (`Signature_`, `ComponentId`, `Type`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.signature);
			view->setString(1, row.componentId);
			view->setInteger(2, row.type ? row.type.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIComplus
{
public:
	std::string component;
	std::optional<int> expType;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Complus` (`Component_` CHAR(72) NOT NULL, `ExpType` SHORT PRIMARY KEY `Component_`, `ExpType`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIComplus>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Complus` (`Component_`, `ExpType`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.component);
			view->setInteger(1, row.expType ? row.expType.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIComponent
{
public:
	std::string component;
	std::optional<std::string> componentId;
	std::string directory;
	int attributes = 0;
	std::optional<std::string> condition;
	std::optional<std::string> keyPath;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Component` (`Component` CHAR(72) NOT NULL, `ComponentId` CHAR(38), `Directory_` CHAR(72) NOT NULL, `Attributes` SHORT NOT NULL, `Condition` CHAR(255), `KeyPath` CHAR(72) PRIMARY KEY `Component`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIComponent>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Component` (`Component`, `ComponentId`, `Directory_`, `Attributes`, `Condition`, `KeyPath`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.component);
			view->setString(1, row.componentId ? row.componentId.value() : "");
			view->setString(2, row.directory);
			view->setInteger(3, row.attributes);
			view->setString(4, row.condition ? row.condition.value() : "");
			view->setString(5, row.keyPath ? row.keyPath.value() : "");
			view->execute();
		}
	}
};

class MSICondition
{
public:
	std::string feature;
	int level = 0;
	std::optional<std::string> condition;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Condition` (`Feature_` CHAR(38) NOT NULL, `Level` SHORT NOT NULL, `Condition` CHAR(255) PRIMARY KEY `Feature_`, `Level`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSICondition>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Condition` (`Feature_`, `Level`, `Condition`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.feature);
			view->setInteger(1, row.level);
			view->setString(2, row.condition ? row.condition.value() : "");
			view->execute();
		}
	}
};

class MSIControl
{
public:
	std::string dialog;
	std::string control;
	std::string type;
	int x = 0;
	int y = 0;
	int width = 0;
	int height = 0;
	std::optional<int> attributes;
	std::optional<std::string> property;
	std::optional<std::string> text; // localizable
	std::optional<std::string> control_Next;
	std::optional<std::string> help; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Control` (`Dialog_` CHAR(72) NOT NULL, `Control` CHAR(50) NOT NULL, `Type` CHAR(20) NOT NULL, `X` SHORT NOT NULL, `Y` SHORT NOT NULL, `Width` SHORT NOT NULL, `Height` SHORT NOT NULL, `Attributes` LONG, `Property` CHAR(72), `Text` LONGCHAR LOCALIZABLE, `Control_Next` CHAR(50), `Help` CHAR(50) LOCALIZABLE PRIMARY KEY `Dialog_`, `Control`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIControl>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Control` (`Dialog_`, `Control`, `Type`, `X`, `Y`, `Width`, `Height`, `Attributes`, `Property`, `Text`, `Control_Next`, `Help`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 12);
		for (auto& row : rows)
		{
			view->setString(0, row.dialog);
			view->setString(1, row.control);
			view->setString(2, row.type);
			view->setInteger(3, row.x);
			view->setInteger(4, row.y);
			view->setInteger(5, row.width);
			view->setInteger(6, row.height);
			view->setInteger(7, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->setString(8, row.property ? row.property.value() : "");
			view->setString(9, row.text ? row.text.value() : "");
			view->setString(10, row.control_Next ? row.control_Next.value() : "");
			view->setString(11, row.help ? row.help.value() : "");
			view->execute();
		}
	}
};

class MSIControlCondition
{
public:
	std::string dialog;
	std::string control;
	std::string action;
	std::string condition;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ControlCondition` (`Dialog_` CHAR(72) NOT NULL, `Control_` CHAR(50) NOT NULL, `Action` CHAR(50) NOT NULL, `Condition` CHAR(255) NOT NULL PRIMARY KEY `Dialog_`, `Control_`, `Action`, `Condition`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIControlCondition>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ControlCondition` (`Dialog_`, `Control_`, `Action`, `Condition`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.dialog);
			view->setString(1, row.control);
			view->setString(2, row.action);
			view->setString(3, row.condition);
			view->execute();
		}
	}
};

class MSIControlEvent
{
public:
	std::string dialog;
	std::string control;
	std::string event;
	std::string argument;
	std::optional<std::string> condition;
	std::optional<int> ordering;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ControlEvent` (`Dialog_` CHAR(72) NOT NULL, `Control_` CHAR(50) NOT NULL, `Event` CHAR(50) NOT NULL, `Argument` CHAR(255) NOT NULL, `Condition` CHAR(255), `Ordering` SHORT PRIMARY KEY `Dialog_`, `Control_`, `Event`, `Argument`, `Condition`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIControlEvent>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ControlEvent` (`Dialog_`, `Control_`, `Event`, `Argument`, `Condition`, `Ordering`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.dialog);
			view->setString(1, row.control);
			view->setString(2, row.event);
			view->setString(3, row.argument);
			view->setString(4, row.condition ? row.condition.value() : "");
			view->setInteger(5, row.ordering ? row.ordering.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSICreateFolder
{
public:
	std::string directory;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `CreateFolder` (`Directory_` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL PRIMARY KEY `Directory_`, `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSICreateFolder>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `CreateFolder` (`Directory_`, `Component_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.directory);
			view->setString(1, row.component);
			view->execute();
		}
	}
};

class MSICustomAction
{
public:
	std::string action;
	int type = 0;
	std::optional<std::string> source;
	std::optional<std::string> target;
	std::optional<int> extendedType;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `CustomAction` (`Action` CHAR(72) NOT NULL, `Type` SHORT NOT NULL, `Source` CHAR(72), `Target` CHAR(255), `ExtendedType` LONG PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSICustomAction>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `CustomAction` (`Action`, `Type`, `Source`, `Target`, `ExtendedType`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setInteger(1, row.type);
			view->setString(2, row.source ? row.source.value() : "");
			view->setString(3, row.target ? row.target.value() : "");
			view->setInteger(4, row.extendedType ? row.extendedType.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIDialog
{
public:
	std::string dialog;
	int hCentering = 0;
	int vCentering = 0;
	int width = 0;
	int height = 0;
	std::optional<int> attributes;
	std::optional<std::string> title; // localizable
	std::string control_First;
	std::optional<std::string> control_Default;
	std::optional<std::string> control_Cancel;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Dialog` (`Dialog` CHAR(72) NOT NULL, `HCentering` SHORT NOT NULL, `VCentering` SHORT NOT NULL, `Width` SHORT NOT NULL, `Height` SHORT NOT NULL, `Attributes` LONG, `Title` CHAR(128) LOCALIZABLE, `Control_First` CHAR(50) NOT NULL, `Control_Default` CHAR(50), `Control_Cancel` CHAR(50) PRIMARY KEY `Dialog`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIDialog>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Dialog` (`Dialog`, `HCentering`, `VCentering`, `Width`, `Height`, `Attributes`, `Title`, `Control_First`, `Control_Default`, `Control_Cancel`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 10);
		for (auto& row : rows)
		{
			view->setString(0, row.dialog);
			view->setInteger(1, row.hCentering);
			view->setInteger(2, row.vCentering);
			view->setInteger(3, row.width);
			view->setInteger(4, row.height);
			view->setInteger(5, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->setString(6, row.title ? row.title.value() : "");
			view->setString(7, row.control_First);
			view->setString(8, row.control_Default ? row.control_Default.value() : "");
			view->setString(9, row.control_Cancel ? row.control_Cancel.value() : "");
			view->execute();
		}
	}
};

class MSIDirectory
{
public:
	std::string directory;
	std::optional<std::string> directory_Parent;
	std::string defaultDir; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Directory` (`Directory` CHAR(72) NOT NULL, `Directory_Parent` CHAR(72), `DefaultDir` CHAR(255) NOT NULL LOCALIZABLE PRIMARY KEY `Directory`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIDirectory>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Directory` (`Directory`, `Directory_Parent`, `DefaultDir`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.directory);
			view->setString(1, row.directory_Parent ? row.directory_Parent.value() : "");
			view->setString(2, row.defaultDir);
			view->execute();
		}
	}
};

class MSIDrLocator
{
public:
	std::string signature;
	std::optional<std::string> parent;
	std::optional<std::string> path;
	std::optional<int> depth;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `DrLocator` (`Signature_` CHAR(72) NOT NULL, `Parent` CHAR(72), `Path` CHAR(255), `Depth` SHORT PRIMARY KEY `Signature_`, `Parent`, `Path`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIDrLocator>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `DrLocator` (`Signature_`, `Parent`, `Path`, `Depth`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.signature);
			view->setString(1, row.parent ? row.parent.value() : "");
			view->setString(2, row.path ? row.path.value() : "");
			view->setInteger(3, row.depth ? row.depth.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIDuplicateFile
{
public:
	std::string fileKey;
	std::string component;
	std::string file;
	std::optional<std::string> destName; // localizable
	std::optional<std::string> destFolder;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `DuplicateFile` (`FileKey` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `File_` CHAR(72) NOT NULL, `DestName` CHAR(255) LOCALIZABLE, `DestFolder` CHAR(72) PRIMARY KEY `FileKey`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIDuplicateFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `DuplicateFile` (`FileKey`, `Component_`, `File_`, `DestName`, `DestFolder`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.fileKey);
			view->setString(1, row.component);
			view->setString(2, row.file);
			view->setString(3, row.destName ? row.destName.value() : "");
			view->setString(4, row.destFolder ? row.destFolder.value() : "");
			view->execute();
		}
	}
};

class MSIEnvironment
{
public:
	std::string environment;
	std::string name; // localizable
	std::optional<std::string> value; // localizable
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Environment` (`Environment` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL LOCALIZABLE, `Value` CHAR(255) LOCALIZABLE, `Component_` CHAR(72) NOT NULL PRIMARY KEY `Environment`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIEnvironment>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Environment` (`Environment`, `Name`, `Value`, `Component_`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.environment);
			view->setString(1, row.name);
			view->setString(2, row.value ? row.value.value() : "");
			view->setString(3, row.component);
			view->execute();
		}
	}
};

class MSIError
{
public:
	int error = 0;
	std::optional<std::string> message; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Error` (`Error` SHORT NOT NULL, `Message` LONGCHAR LOCALIZABLE PRIMARY KEY `Error`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIError>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Error` (`Error`, `Message`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setInteger(0, row.error);
			view->setString(1, row.message ? row.message.value() : "");
			view->execute();
		}
	}
};

class MSIEventMapping
{
public:
	std::string dialog;
	std::string control;
	std::string event;
	std::string attribute;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `EventMapping` (`Dialog_` CHAR(72) NOT NULL, `Control_` CHAR(50) NOT NULL, `Event` CHAR(50) NOT NULL, `Attribute` CHAR(50) NOT NULL PRIMARY KEY `Dialog_`, `Control_`, `Event`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIEventMapping>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `EventMapping` (`Dialog_`, `Control_`, `Event`, `Attribute`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.dialog);
			view->setString(1, row.control);
			view->setString(2, row.event);
			view->setString(3, row.attribute);
			view->execute();
		}
	}
};

class MSIExtension
{
public:
	std::string extension;
	std::string component;
	std::optional<std::string> progId;
	std::optional<std::string> mIME;
	std::string feature;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Extension` (`Extension` CHAR(255) NOT NULL, `Component_` CHAR(72) NOT NULL, `ProgId_` CHAR(255), `MIME_` CHAR(64), `Feature_` CHAR(38) NOT NULL PRIMARY KEY `Extension`, `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIExtension>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Extension` (`Extension`, `Component_`, `ProgId_`, `MIME_`, `Feature_`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.extension);
			view->setString(1, row.component);
			view->setString(2, row.progId ? row.progId.value() : "");
			view->setString(3, row.mIME ? row.mIME.value() : "");
			view->setString(4, row.feature);
			view->execute();
		}
	}
};

class MSIFeature
{
public:
	std::string feature;
	std::optional<std::string> feature_Parent;
	std::optional<std::string> title; // localizable
	std::optional<std::string> description; // localizable
	std::optional<int> display;
	int level = 0;
	std::optional<std::string> directory;
	int attributes = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Feature` (`Feature` CHAR(38) NOT NULL, `Feature_Parent` CHAR(38), `Title` CHAR(64) LOCALIZABLE, `Description` CHAR(255) LOCALIZABLE, `Display` SHORT, `Level` SHORT NOT NULL, `Directory_` CHAR(72), `Attributes` SHORT NOT NULL PRIMARY KEY `Feature`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIFeature>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Feature` (`Feature`, `Feature_Parent`, `Title`, `Description`, `Display`, `Level`, `Directory_`, `Attributes`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", 8);
		for (auto& row : rows)
		{
			view->setString(0, row.feature);
			view->setString(1, row.feature_Parent ? row.feature_Parent.value() : "");
			view->setString(2, row.title ? row.title.value() : "");
			view->setString(3, row.description ? row.description.value() : "");
			view->setInteger(4, row.display ? row.display.value() : MSI_NULL_INTEGER);
			view->setInteger(5, row.level);
			view->setString(6, row.directory ? row.directory.value() : "");
			view->setInteger(7, row.attributes);
			view->execute();
		}
	}
};

class MSIFeatureComponents
{
public:
	std::string feature;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `FeatureComponents` (`Feature_` CHAR(38) NOT NULL, `Component_` CHAR(72) NOT NULL PRIMARY KEY `Feature_`, `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIFeatureComponents>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `FeatureComponents` (`Feature_`, `Component_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.feature);
			view->setString(1, row.component);
			view->execute();
		}
	}
};

class MSIFile
{
public:
	std::string file;
	std::string component;
	std::string fileName; // localizable
	int fileSize = 0;
	std::optional<std::string> version;
	std::optional<std::string> language;
	std::optional<int> attributes;
	int sequence = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `File` (`File` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `FileName` CHAR(255) NOT NULL LOCALIZABLE, `FileSize` LONG NOT NULL, `Version` CHAR(72), `Language` CHAR(20), `Attributes` SHORT, `Sequence` SHORT NOT NULL PRIMARY KEY `File`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `File` (`File`, `Component_`, `FileName`, `FileSize`, `Version`, `Language`, `Attributes`, `Sequence`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", 8);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setString(1, row.component);
			view->setString(2, row.fileName);
			view->setInteger(3, row.fileSize);
			view->setString(4, row.version ? row.version.value() : "");
			view->setString(5, row.language ? row.language.value() : "");
			view->setInteger(6, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->setInteger(7, row.sequence);
			view->execute();
		}
	}
};

class MSIFileSFPCatalog
{
public:
	std::string file;
	std::string sFPCatalog;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `FileSFPCatalog` (`File_` CHAR(72) NOT NULL, `SFPCatalog_` CHAR(255) NOT NULL PRIMARY KEY `File_`, `SFPCatalog_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIFileSFPCatalog>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `FileSFPCatalog` (`File_`, `SFPCatalog_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setString(1, row.sFPCatalog);
			view->execute();
		}
	}
};

class MSIFont
{
public:
	std::string file;
	std::optional<std::string> fontTitle;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Font` (`File_` CHAR(72) NOT NULL, `FontTitle` CHAR(128) PRIMARY KEY `File_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIFont>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Font` (`File_`, `FontTitle`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setString(1, row.fontTitle ? row.fontTitle.value() : "");
			view->execute();
		}
	}
};

class MSIIcon
{
public:
	std::string name;
	MSIObject data;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Icon` (`Name` CHAR(72) NOT NULL, `Data` OBJECT NOT NULL PRIMARY KEY `Name`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIIcon>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Icon` (`Name`, `Data`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.name);
			view->setStream(1, row.data.filename);
			view->execute();
		}
	}
};

class MSIIniFile
{
public:
	std::string iniFile;
	std::string fileName; // localizable
	std::optional<std::string> dirProperty;
	std::string section; // localizable
	std::string key; // localizable
	std::string value; // localizable
	int action = 0;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `IniFile` (`IniFile` CHAR(72) NOT NULL, `FileName` CHAR(255) NOT NULL LOCALIZABLE, `DirProperty` CHAR(72), `Section` CHAR(96) NOT NULL LOCALIZABLE, `Key` CHAR(128) NOT NULL LOCALIZABLE, `Value` CHAR(255) NOT NULL LOCALIZABLE, `Action` SHORT NOT NULL, `Component_` CHAR(72) NOT NULL PRIMARY KEY `IniFile`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIIniFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `IniFile` (`IniFile`, `FileName`, `DirProperty`, `Section`, `Key`, `Value`, `Action`, `Component_`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", 8);
		for (auto& row : rows)
		{
			view->setString(0, row.iniFile);
			view->setString(1, row.fileName);
			view->setString(2, row.dirProperty ? row.dirProperty.value() : "");
			view->setString(3, row.section);
			view->setString(4, row.key);
			view->setString(5, row.value);
			view->setInteger(6, row.action);
			view->setString(7, row.component);
			view->execute();
		}
	}
};

class MSIIniLocator
{
public:
	std::string signature;
	std::string fileName;
	std::string section;
	std::string key;
	std::optional<int> field;
	std::optional<int> type;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `IniLocator` (`Signature_` CHAR(72) NOT NULL, `FileName` CHAR(255) NOT NULL, `Section` CHAR(96) NOT NULL, `Key` CHAR(128) NOT NULL, `Field` SHORT, `Type` SHORT PRIMARY KEY `Signature_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIIniLocator>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `IniLocator` (`Signature_`, `FileName`, `Section`, `Key`, `Field`, `Type`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.signature);
			view->setString(1, row.fileName);
			view->setString(2, row.section);
			view->setString(3, row.key);
			view->setInteger(4, row.field ? row.field.value() : MSI_NULL_INTEGER);
			view->setInteger(5, row.type ? row.type.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIInstallExecuteSequence
{
public:
	std::string action;
	std::optional<std::string> condition;
	std::optional<int> sequence;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `InstallExecuteSequence` (`Action` CHAR(72) NOT NULL, `Condition` CHAR(255), `Sequence` SHORT PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIInstallExecuteSequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `InstallExecuteSequence` (`Action`, `Condition`, `Sequence`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIInstallUISequence
{
public:
	std::string action;
	std::optional<std::string> condition;
	std::optional<int> sequence;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `InstallUISequence` (`Action` CHAR(72) NOT NULL, `Condition` CHAR(255), `Sequence` SHORT PRIMARY KEY `Action`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIInstallUISequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `InstallUISequence` (`Action`, `Condition`, `Sequence`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.action);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIIsolatedComponent
{
public:
	std::string component_Shared;
	std::string component_Application;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `IsolatedComponent` (`Component_Shared` CHAR(72) NOT NULL, `Component_Application` CHAR(72) NOT NULL PRIMARY KEY `Component_Shared`, `Component_Application`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIIsolatedComponent>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `IsolatedComponent` (`Component_Shared`, `Component_Application`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.component_Shared);
			view->setString(1, row.component_Application);
			view->execute();
		}
	}
};

class MSILaunchCondition
{
public:
	std::string condition;
	std::string description; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `LaunchCondition` (`Condition` CHAR(255) NOT NULL, `Description` CHAR(255) NOT NULL LOCALIZABLE PRIMARY KEY `Condition`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSILaunchCondition>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `LaunchCondition` (`Condition`, `Description`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.condition);
			view->setString(1, row.description);
			view->execute();
		}
	}
};

class MSIListBox
{
public:
	std::string property;
	int order = 0;
	std::string value;
	std::optional<std::string> text; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ListBox` (`Property` CHAR(72) NOT NULL, `Order` SHORT NOT NULL, `Value` CHAR(64) NOT NULL, `Text` CHAR(64) LOCALIZABLE PRIMARY KEY `Property`, `Order`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIListBox>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ListBox` (`Property`, `Order`, `Value`, `Text`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setInteger(1, row.order);
			view->setString(2, row.value);
			view->setString(3, row.text ? row.text.value() : "");
			view->execute();
		}
	}
};

class MSIListView
{
public:
	std::string property;
	int order = 0;
	std::string value;
	std::optional<std::string> text; // localizable
	std::optional<std::string> binary;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ListView` (`Property` CHAR(72) NOT NULL, `Order` SHORT NOT NULL, `Value` CHAR(64) NOT NULL, `Text` CHAR(64) LOCALIZABLE, `Binary_` CHAR(72) PRIMARY KEY `Property`, `Order`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIListView>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ListView` (`Property`, `Order`, `Value`, `Text`, `Binary_`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setInteger(1, row.order);
			view->setString(2, row.value);
			view->setString(3, row.text ? row.text.value() : "");
			view->setString(4, row.binary ? row.binary.value() : "");
			view->execute();
		}
	}
};

class MSILockPermissions
{
public:
	std::string lockObject;
	std::string table;
	std::optional<std::string> domain;
	std::string user;
	std::optional<int> permission;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `LockPermissions` (`LockObject` CHAR(72) NOT NULL, `Table` CHAR(32) NOT NULL, `Domain` CHAR(255), `User` CHAR(255) NOT NULL, `Permission` LONG PRIMARY KEY `LockObject`, `Table`, `Domain`, `User`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSILockPermissions>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `LockPermissions` (`LockObject`, `Table`, `Domain`, `User`, `Permission`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.lockObject);
			view->setString(1, row.table);
			view->setString(2, row.domain ? row.domain.value() : "");
			view->setString(3, row.user);
			view->setInteger(4, row.permission ? row.permission.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIMIME
{
public:
	std::string contentType;
	std::string extension;
	std::optional<std::string> cLSID;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MIME` (`ContentType` CHAR(64) NOT NULL, `Extension_` CHAR(255) NOT NULL, `CLSID` CHAR(38) PRIMARY KEY `ContentType`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIMIME>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MIME` (`ContentType`, `Extension_`, `CLSID`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.contentType);
			view->setString(1, row.extension);
			view->setString(2, row.cLSID ? row.cLSID.value() : "");
			view->execute();
		}
	}
};

class MSIMedia
{
public:
	int diskId = 0;
	int lastSequence = 0;
	std::optional<std::string> diskPrompt; // localizable
	std::optional<std::string> cabinet;
	std::optional<std::string> volumeLabel;
	std::optional<std::string> source;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Media` (`DiskId` SHORT NOT NULL, `LastSequence` SHORT NOT NULL, `DiskPrompt` CHAR(64) LOCALIZABLE, `Cabinet` CHAR(255), `VolumeLabel` CHAR(32), `Source` CHAR(72) PRIMARY KEY `DiskId`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIMedia>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Media` (`DiskId`, `LastSequence`, `DiskPrompt`, `Cabinet`, `VolumeLabel`, `Source`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setInteger(0, row.diskId);
			view->setInteger(1, row.lastSequence);
			view->setString(2, row.diskPrompt ? row.diskPrompt.value() : "");
			view->setString(3, row.cabinet ? row.cabinet.value() : "");
			view->setString(4, row.volumeLabel ? row.volumeLabel.value() : "");
			view->setString(5, row.source ? row.source.value() : "");
			view->execute();
		}
	}
};

class MSIMoveFile
{
public:
	std::string fileKey;
	std::string component;
	std::optional<std::string> sourceName; // localizable
	std::optional<std::string> destName; // localizable
	std::optional<std::string> sourceFolder;
	std::string destFolder;
	int options = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MoveFile` (`FileKey` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `SourceName` CHAR(255) LOCALIZABLE, `DestName` CHAR(255) LOCALIZABLE, `SourceFolder` CHAR(72), `DestFolder` CHAR(72) NOT NULL, `Options` SHORT NOT NULL PRIMARY KEY `FileKey`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIMoveFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MoveFile` (`FileKey`, `Component_`, `SourceName`, `DestName`, `SourceFolder`, `DestFolder`, `Options`) VALUES(?, ?, ?, ?, ?, ?, ?)", 7);
		for (auto& row : rows)
		{
			view->setString(0, row.fileKey);
			view->setString(1, row.component);
			view->setString(2, row.sourceName ? row.sourceName.value() : "");
			view->setString(3, row.destName ? row.destName.value() : "");
			view->setString(4, row.sourceFolder ? row.sourceFolder.value() : "");
			view->setString(5, row.destFolder);
			view->setInteger(6, row.options);
			view->execute();
		}
	}
};

class MSIAssembly
{
public:
	std::string component;
	std::string feature;
	std::optional<std::string> file_Manifest;
	std::optional<std::string> file_Application;
	std::optional<int> attributes;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiAssembly` (`Component_` CHAR(72) NOT NULL, `Feature_` CHAR(38) NOT NULL, `File_Manifest` CHAR(72), `File_Application` CHAR(72), `Attributes` SHORT PRIMARY KEY `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAssembly>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiAssembly` (`Component_`, `Feature_`, `File_Manifest`, `File_Application`, `Attributes`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.component);
			view->setString(1, row.feature);
			view->setString(2, row.file_Manifest ? row.file_Manifest.value() : "");
			view->setString(3, row.file_Application ? row.file_Application.value() : "");
			view->setInteger(4, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIAssemblyName
{
public:
	std::string component;
	std::string name;
	std::string value;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiAssemblyName` (`Component_` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL, `Value` CHAR(255) NOT NULL PRIMARY KEY `Component_`, `Name`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIAssemblyName>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiAssemblyName` (`Component_`, `Name`, `Value`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.component);
			view->setString(1, row.name);
			view->setString(2, row.value);
			view->execute();
		}
	}
};

class MSIDigitalCertificate
{
public:
	std::string digitalCertificate;
	MSIObject certData;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiDigitalCertificate` (`DigitalCertificate` CHAR(72) NOT NULL, `CertData` OBJECT NOT NULL PRIMARY KEY `DigitalCertificate`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIDigitalCertificate>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiDigitalCertificate` (`DigitalCertificate`, `CertData`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.digitalCertificate);
			view->setStream(1, row.certData.filename);
			view->execute();
		}
	}
};

class MSIDigitalSignature
{
public:
	std::string table;
	std::string signObject;
	std::string digitalCertificate;
	std::optional<MSIObject> hash;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiDigitalSignature` (`Table` CHAR(32) NOT NULL, `SignObject` CHAR(72) NOT NULL, `DigitalCertificate_` CHAR(72) NOT NULL, `Hash` OBJECT PRIMARY KEY `Table`, `SignObject`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIDigitalSignature>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiDigitalSignature` (`Table`, `SignObject`, `DigitalCertificate_`, `Hash`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.table);
			view->setString(1, row.signObject);
			view->setString(2, row.digitalCertificate);
			view->setStream(3, row.hash ? row.hash.value().filename : "");
			view->execute();
		}
	}
};

class MSIEmbeddedChainer
{
public:
	std::string msiEmbeddedChainer;
	std::optional<std::string> condition;
	std::optional<std::string> commandLine;
	std::string source;
	int type = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiEmbeddedChainer` (`MsiEmbeddedChainer` CHAR(72) NOT NULL, `Condition` CHAR(255), `CommandLine` CHAR(255), `Source` CHAR(72) NOT NULL, `Type` SHORT NOT NULL PRIMARY KEY `MsiEmbeddedChainer`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIEmbeddedChainer>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiEmbeddedChainer` (`MsiEmbeddedChainer`, `Condition`, `CommandLine`, `Source`, `Type`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.msiEmbeddedChainer);
			view->setString(1, row.condition ? row.condition.value() : "");
			view->setString(2, row.commandLine ? row.commandLine.value() : "");
			view->setString(3, row.source);
			view->setInteger(4, row.type);
			view->execute();
		}
	}
};

class MSIEmbeddedUI
{
public:
	std::string msiEmbeddedUI;
	std::string fileName;
	int attributes = 0;
	std::optional<int> messageFilter;
	MSIObject data;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiEmbeddedUI` (`MsiEmbeddedUI` CHAR(72) NOT NULL, `FileName` CHAR(255) NOT NULL, `Attributes` SHORT NOT NULL, `MessageFilter` LONG, `Data` OBJECT NOT NULL PRIMARY KEY `MsiEmbeddedUI`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIEmbeddedUI>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiEmbeddedUI` (`MsiEmbeddedUI`, `FileName`, `Attributes`, `MessageFilter`, `Data`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.msiEmbeddedUI);
			view->setString(1, row.fileName);
			view->setInteger(2, row.attributes);
			view->setInteger(3, row.messageFilter ? row.messageFilter.value() : MSI_NULL_INTEGER);
			view->setStream(4, row.data.filename);
			view->execute();
		}
	}
};

class MSIFileHash
{
public:
	std::string file;
	int options = 0;
	int hashPart1 = 0;
	int hashPart2 = 0;
	int hashPart3 = 0;
	int hashPart4 = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiFileHash` (`File_` CHAR(72) NOT NULL, `Options` SHORT NOT NULL, `HashPart1` LONG NOT NULL, `HashPart2` LONG NOT NULL, `HashPart3` LONG NOT NULL, `HashPart4` LONG NOT NULL PRIMARY KEY `File_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIFileHash>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiFileHash` (`File_`, `Options`, `HashPart1`, `HashPart2`, `HashPart3`, `HashPart4`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setInteger(1, row.options);
			view->setInteger(2, row.hashPart1);
			view->setInteger(3, row.hashPart2);
			view->setInteger(4, row.hashPart3);
			view->setInteger(5, row.hashPart4);
			view->execute();
		}
	}
};

class MSILockPermissionsEx
{
public:
	std::string msiLockPermissionsEx;
	std::string lockObject;
	std::string table;
	std::string sDDLText;
	std::optional<std::string> condition;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiLockPermissionsEx` (`MsiLockPermissionsEx` CHAR(72) NOT NULL, `LockObject` CHAR(72) NOT NULL, `Table` CHAR(32) NOT NULL, `SDDLText` LONGCHAR NOT NULL, `Condition` CHAR(255) PRIMARY KEY `MsiLockPermissionsEx`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSILockPermissionsEx>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiLockPermissionsEx` (`MsiLockPermissionsEx`, `LockObject`, `Table`, `SDDLText`, `Condition`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.msiLockPermissionsEx);
			view->setString(1, row.lockObject);
			view->setString(2, row.table);
			view->setString(3, row.sDDLText);
			view->setString(4, row.condition ? row.condition.value() : "");
			view->execute();
		}
	}
};

class MSIPackageCertificate
{
public:
	std::string packageCertificate;
	std::string digitalCertificate;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPackageCertificate` (`PackageCertificate` CHAR(72) NOT NULL, `DigitalCertificate_` CHAR(72) NOT NULL PRIMARY KEY `PackageCertificate`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPackageCertificate>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPackageCertificate` (`PackageCertificate`, `DigitalCertificate_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.packageCertificate);
			view->setString(1, row.digitalCertificate);
			view->execute();
		}
	}
};

class MSIPatchCertificate
{
public:
	std::string patchCertificate;
	std::string digitalCertificate;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPatchCertificate` (`PatchCertificate` CHAR(72) NOT NULL, `DigitalCertificate_` CHAR(72) NOT NULL PRIMARY KEY `PatchCertificate`, `DigitalCertificate_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchCertificate>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPatchCertificate` (`PatchCertificate`, `DigitalCertificate_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.patchCertificate);
			view->setString(1, row.digitalCertificate);
			view->execute();
		}
	}
};

class MSIPatchHeaders
{
public:
	std::string streamRef;
	MSIObject header;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPatchHeaders` (`StreamRef` CHAR(38) NOT NULL, `Header` OBJECT NOT NULL PRIMARY KEY `StreamRef`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchHeaders>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPatchHeaders` (`StreamRef`, `Header`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.streamRef);
			view->setStream(1, row.header.filename);
			view->execute();
		}
	}
};

class MSIPatchMetadata
{
public:
	std::optional<std::string> company;
	std::string property;
	std::string value; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPatchMetadata` (`Company` CHAR(72), `Property` CHAR(72) NOT NULL, `Value` LONGCHAR NOT NULL LOCALIZABLE PRIMARY KEY `Company`, `Property`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchMetadata>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPatchMetadata` (`Company`, `Property`, `Value`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.company ? row.company.value() : "");
			view->setString(1, row.property);
			view->setString(2, row.value);
			view->execute();
		}
	}
};

class MSIPatchOldAssemblyFile
{
public:
	std::string file;
	std::string assembly;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPatchOldAssemblyFile` (`File_` CHAR(72) NOT NULL, `Assembly_` CHAR(72) NOT NULL PRIMARY KEY `File_`, `Assembly_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchOldAssemblyFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPatchOldAssemblyFile` (`File_`, `Assembly_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setString(1, row.assembly);
			view->execute();
		}
	}
};

class MSIPatchOldAssemblyName
{
public:
	std::string assembly;
	std::string name;
	std::string value;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPatchOldAssemblyName` (`Assembly` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL, `Value` CHAR(255) NOT NULL PRIMARY KEY `Assembly`, `Name`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchOldAssemblyName>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPatchOldAssemblyName` (`Assembly`, `Name`, `Value`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.assembly);
			view->setString(1, row.name);
			view->setString(2, row.value);
			view->execute();
		}
	}
};

class MSIPatchSequence
{
public:
	std::string patchFamily;
	std::optional<std::string> productCode;
	std::string sequence;
	std::optional<int> attributes;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiPatchSequence` (`PatchFamily` CHAR(72) NOT NULL, `ProductCode` CHAR(38), `Sequence` CHAR(72) NOT NULL, `Attributes` LONG PRIMARY KEY `PatchFamily`, `ProductCode`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchSequence>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiPatchSequence` (`PatchFamily`, `ProductCode`, `Sequence`, `Attributes`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.patchFamily);
			view->setString(1, row.productCode ? row.productCode.value() : "");
			view->setString(2, row.sequence);
			view->setInteger(3, row.attributes ? row.attributes.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSISFCBypass
{
public:
	std::string file;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiSFCBypass` (`File_` CHAR(72) NOT NULL PRIMARY KEY `File_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSISFCBypass>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiSFCBypass` (`File_`) VALUES(?)", 1);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->execute();
		}
	}
};

class MSIServiceConfig
{
public:
	std::string msiServiceConfig;
	std::string name; // localizable
	int event = 0;
	int configType = 0;
	std::optional<std::string> argument;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiServiceConfig` (`MsiServiceConfig` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL LOCALIZABLE, `Event` SHORT NOT NULL, `ConfigType` LONG NOT NULL, `Argument` LONGCHAR, `Component_` CHAR(72) NOT NULL PRIMARY KEY `MsiServiceConfig`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIServiceConfig>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiServiceConfig` (`MsiServiceConfig`, `Name`, `Event`, `ConfigType`, `Argument`, `Component_`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.msiServiceConfig);
			view->setString(1, row.name);
			view->setInteger(2, row.event);
			view->setInteger(3, row.configType);
			view->setString(4, row.argument ? row.argument.value() : "");
			view->setString(5, row.component);
			view->execute();
		}
	}
};

class MSIServiceConfigFailureActions
{
public:
	std::string msiServiceConfigFailureActions;
	std::string name; // localizable
	int event = 0;
	std::optional<int> resetPeriod;
	std::optional<std::string> rebootMessage; // localizable
	std::optional<std::string> command; // localizable
	std::optional<std::string> actions;
	std::optional<std::string> delayActions;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiServiceConfigFailureActions` (`MsiServiceConfigFailureActions` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL LOCALIZABLE, `Event` SHORT NOT NULL, `ResetPeriod` LONG, `RebootMessage` CHAR(255) LOCALIZABLE, `Command` CHAR(255) LOCALIZABLE, `Actions` LONGCHAR, `DelayActions` LONGCHAR, `Component_` CHAR(72) NOT NULL PRIMARY KEY `MsiServiceConfigFailureActions`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIServiceConfigFailureActions>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiServiceConfigFailureActions` (`MsiServiceConfigFailureActions`, `Name`, `Event`, `ResetPeriod`, `RebootMessage`, `Command`, `Actions`, `DelayActions`, `Component_`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", 9);
		for (auto& row : rows)
		{
			view->setString(0, row.msiServiceConfigFailureActions);
			view->setString(1, row.name);
			view->setInteger(2, row.event);
			view->setInteger(3, row.resetPeriod ? row.resetPeriod.value() : MSI_NULL_INTEGER);
			view->setString(4, row.rebootMessage ? row.rebootMessage.value() : "");
			view->setString(5, row.command ? row.command.value() : "");
			view->setString(6, row.actions ? row.actions.value() : "");
			view->setString(7, row.delayActions ? row.delayActions.value() : "");
			view->setString(8, row.component);
			view->execute();
		}
	}
};

class MSIShortcutProperty
{
public:
	std::string msiShortcutProperty;
	std::string shortcut;
	std::string propertyKey;
	std::string propVariantValue;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `MsiShortcutProperty` (`MsiShortcutProperty` CHAR(72) NOT NULL, `Shortcut_` CHAR(72) NOT NULL, `PropertyKey` LONGCHAR NOT NULL, `PropVariantValue` LONGCHAR NOT NULL PRIMARY KEY `MsiShortcutProperty`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIShortcutProperty>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `MsiShortcutProperty` (`MsiShortcutProperty`, `Shortcut_`, `PropertyKey`, `PropVariantValue`) VALUES(?, ?, ?, ?)", 4);
		for (auto& row : rows)
		{
			view->setString(0, row.msiShortcutProperty);
			view->setString(1, row.shortcut);
			view->setString(2, row.propertyKey);
			view->setString(3, row.propVariantValue);
			view->execute();
		}
	}
};

class MSIODBCAttribute
{
public:
	std::string driver;
	std::string attribute;
	std::optional<std::string> value; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ODBCAttribute` (`Driver_` CHAR(72) NOT NULL, `Attribute` CHAR(40) NOT NULL, `Value` CHAR(255) LOCALIZABLE PRIMARY KEY `Driver_`, `Attribute`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIODBCAttribute>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ODBCAttribute` (`Driver_`, `Attribute`, `Value`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.driver);
			view->setString(1, row.attribute);
			view->setString(2, row.value ? row.value.value() : "");
			view->execute();
		}
	}
};

class MSIODBCDataSource
{
public:
	std::string dataSource;
	std::string component;
	std::string description;
	std::string driverDescription;
	int registration = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ODBCDataSource` (`DataSource` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `Description` CHAR(255) NOT NULL, `DriverDescription` CHAR(255) NOT NULL, `Registration` SHORT NOT NULL PRIMARY KEY `DataSource`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIODBCDataSource>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ODBCDataSource` (`DataSource`, `Component_`, `Description`, `DriverDescription`, `Registration`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.dataSource);
			view->setString(1, row.component);
			view->setString(2, row.description);
			view->setString(3, row.driverDescription);
			view->setInteger(4, row.registration);
			view->execute();
		}
	}
};

class MSIODBCDriver
{
public:
	std::string driver;
	std::string component;
	std::string description;
	std::string file;
	std::optional<std::string> file_Setup;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ODBCDriver` (`Driver` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `Description` CHAR(255) NOT NULL, `File_` CHAR(72) NOT NULL, `File_Setup` CHAR(72) PRIMARY KEY `Driver`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIODBCDriver>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ODBCDriver` (`Driver`, `Component_`, `Description`, `File_`, `File_Setup`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.driver);
			view->setString(1, row.component);
			view->setString(2, row.description);
			view->setString(3, row.file);
			view->setString(4, row.file_Setup ? row.file_Setup.value() : "");
			view->execute();
		}
	}
};

class MSIODBCSourceAttribute
{
public:
	std::string dataSource;
	std::string attribute;
	std::optional<std::string> value; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ODBCSourceAttribute` (`DataSource_` CHAR(72) NOT NULL, `Attribute` CHAR(32) NOT NULL, `Value` CHAR(255) LOCALIZABLE PRIMARY KEY `DataSource_`, `Attribute`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIODBCSourceAttribute>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ODBCSourceAttribute` (`DataSource_`, `Attribute`, `Value`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.dataSource);
			view->setString(1, row.attribute);
			view->setString(2, row.value ? row.value.value() : "");
			view->execute();
		}
	}
};

class MSIODBCTranslator
{
public:
	std::string translator;
	std::string component;
	std::string description;
	std::string file;
	std::optional<std::string> file_Setup;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ODBCTranslator` (`Translator` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `Description` CHAR(255) NOT NULL, `File_` CHAR(72) NOT NULL, `File_Setup` CHAR(72) PRIMARY KEY `Translator`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIODBCTranslator>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ODBCTranslator` (`Translator`, `Component_`, `Description`, `File_`, `File_Setup`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.translator);
			view->setString(1, row.component);
			view->setString(2, row.description);
			view->setString(3, row.file);
			view->setString(4, row.file_Setup ? row.file_Setup.value() : "");
			view->execute();
		}
	}
};

class MSIPatch
{
public:
	std::string file;
	int sequence = 0;
	int patchSize = 0;
	int attributes = 0;
	std::optional<MSIObject> header;
	std::optional<std::string> streamRef;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Patch` (`File_` CHAR(72) NOT NULL, `Sequence` SHORT NOT NULL, `PatchSize` LONG NOT NULL, `Attributes` SHORT NOT NULL, `Header` OBJECT, `StreamRef_` CHAR(38) PRIMARY KEY `File_`, `Sequence`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatch>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Patch` (`File_`, `Sequence`, `PatchSize`, `Attributes`, `Header`, `StreamRef_`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setInteger(1, row.sequence);
			view->setInteger(2, row.patchSize);
			view->setInteger(3, row.attributes);
			view->setStream(4, row.header ? row.header.value().filename : "");
			view->setString(5, row.streamRef ? row.streamRef.value() : "");
			view->execute();
		}
	}
};

class MSIPatchPackage
{
public:
	std::string patchId;
	int media = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `PatchPackage` (`PatchId` CHAR(38) NOT NULL, `Media_` SHORT NOT NULL PRIMARY KEY `PatchId`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPatchPackage>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `PatchPackage` (`PatchId`, `Media_`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.patchId);
			view->setInteger(1, row.media);
			view->execute();
		}
	}
};

class MSIProgId
{
public:
	std::string progId;
	std::optional<std::string> progId_Parent;
	std::optional<std::string> class_;
	std::optional<std::string> description; // localizable
	std::optional<std::string> icon;
	std::optional<int> iconIndex;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ProgId` (`ProgId` CHAR(255) NOT NULL, `ProgId_Parent` CHAR(255), `Class_` CHAR(38), `Description` CHAR(255) LOCALIZABLE, `Icon_` CHAR(72), `IconIndex` SHORT PRIMARY KEY `ProgId`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIProgId>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ProgId` (`ProgId`, `ProgId_Parent`, `Class_`, `Description`, `Icon_`, `IconIndex`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.progId);
			view->setString(1, row.progId_Parent ? row.progId_Parent.value() : "");
			view->setString(2, row.class_ ? row.class_.value() : "");
			view->setString(3, row.description ? row.description.value() : "");
			view->setString(4, row.icon ? row.icon.value() : "");
			view->setInteger(5, row.iconIndex ? row.iconIndex.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIProperty
{
public:
	std::string property;
	std::string value; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Property` (`Property` CHAR(72) NOT NULL, `Value` LONGCHAR NOT NULL LOCALIZABLE PRIMARY KEY `Property`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIProperty>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Property` (`Property`, `Value`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setString(1, row.value);
			view->execute();
		}
	}
};

class MSIPublishComponent
{
public:
	std::string componentId;
	std::string qualifier;
	std::string component;
	std::optional<std::string> appData; // localizable
	std::string feature;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `PublishComponent` (`ComponentId` CHAR(38) NOT NULL, `Qualifier` CHAR(255) NOT NULL, `Component_` CHAR(72) NOT NULL, `AppData` LONGCHAR LOCALIZABLE, `Feature_` CHAR(38) NOT NULL PRIMARY KEY `ComponentId`, `Qualifier`, `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIPublishComponent>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `PublishComponent` (`ComponentId`, `Qualifier`, `Component_`, `AppData`, `Feature_`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.componentId);
			view->setString(1, row.qualifier);
			view->setString(2, row.component);
			view->setString(3, row.appData ? row.appData.value() : "");
			view->setString(4, row.feature);
			view->execute();
		}
	}
};

class MSIRadioButton
{
public:
	std::string property;
	int order = 0;
	std::string value;
	int x = 0;
	int y = 0;
	int width = 0;
	int height = 0;
	std::optional<std::string> text; // localizable
	std::optional<std::string> help; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `RadioButton` (`Property` CHAR(72) NOT NULL, `Order` SHORT NOT NULL, `Value` CHAR(64) NOT NULL, `X` SHORT NOT NULL, `Y` SHORT NOT NULL, `Width` SHORT NOT NULL, `Height` SHORT NOT NULL, `Text` CHAR(64) LOCALIZABLE, `Help` CHAR(50) LOCALIZABLE PRIMARY KEY `Property`, `Order`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIRadioButton>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `RadioButton` (`Property`, `Order`, `Value`, `X`, `Y`, `Width`, `Height`, `Text`, `Help`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", 9);
		for (auto& row : rows)
		{
			view->setString(0, row.property);
			view->setInteger(1, row.order);
			view->setString(2, row.value);
			view->setInteger(3, row.x);
			view->setInteger(4, row.y);
			view->setInteger(5, row.width);
			view->setInteger(6, row.height);
			view->setString(7, row.text ? row.text.value() : "");
			view->setString(8, row.help ? row.help.value() : "");
			view->execute();
		}
	}
};

class MSIRegLocator
{
public:
	std::string signature;
	int root = 0;
	std::string key;
	std::optional<std::string> name;
	std::optional<int> type;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `RegLocator` (`Signature_` CHAR(72) NOT NULL, `Root` SHORT NOT NULL, `Key` CHAR(255) NOT NULL, `Name` CHAR(255), `Type` SHORT PRIMARY KEY `Signature_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIRegLocator>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `RegLocator` (`Signature_`, `Root`, `Key`, `Name`, `Type`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.signature);
			view->setInteger(1, row.root);
			view->setString(2, row.key);
			view->setString(3, row.name ? row.name.value() : "");
			view->setInteger(4, row.type ? row.type.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIRegistry
{
public:
	std::string registry;
	int root = 0;
	std::string key; // localizable
	std::optional<std::string> name; // localizable
	std::optional<std::string> value; // localizable
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Registry` (`Registry` CHAR(72) NOT NULL, `Root` SHORT NOT NULL, `Key` CHAR(255) NOT NULL LOCALIZABLE, `Name` CHAR(255) LOCALIZABLE, `Value` LONGCHAR LOCALIZABLE, `Component_` CHAR(72) NOT NULL PRIMARY KEY `Registry`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIRegistry>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Registry` (`Registry`, `Root`, `Key`, `Name`, `Value`, `Component_`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.registry);
			view->setInteger(1, row.root);
			view->setString(2, row.key);
			view->setString(3, row.name ? row.name.value() : "");
			view->setString(4, row.value ? row.value.value() : "");
			view->setString(5, row.component);
			view->execute();
		}
	}
};

class MSIRemoveFile
{
public:
	std::string fileKey;
	std::string component;
	std::optional<std::string> fileName; // localizable
	std::string dirProperty;
	int installMode = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `RemoveFile` (`FileKey` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `FileName` CHAR(255) LOCALIZABLE, `DirProperty` CHAR(72) NOT NULL, `InstallMode` SHORT NOT NULL PRIMARY KEY `FileKey`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIRemoveFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `RemoveFile` (`FileKey`, `Component_`, `FileName`, `DirProperty`, `InstallMode`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.fileKey);
			view->setString(1, row.component);
			view->setString(2, row.fileName ? row.fileName.value() : "");
			view->setString(3, row.dirProperty);
			view->setInteger(4, row.installMode);
			view->execute();
		}
	}
};

class MSIRemoveIniFile
{
public:
	std::string removeIniFile;
	std::string fileName; // localizable
	std::optional<std::string> dirProperty;
	std::string section; // localizable
	std::string key; // localizable
	std::optional<std::string> value; // localizable
	int action = 0;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `RemoveIniFile` (`RemoveIniFile` CHAR(72) NOT NULL, `FileName` CHAR(255) NOT NULL LOCALIZABLE, `DirProperty` CHAR(72), `Section` CHAR(96) NOT NULL LOCALIZABLE, `Key` CHAR(128) NOT NULL LOCALIZABLE, `Value` CHAR(255) LOCALIZABLE, `Action` SHORT NOT NULL, `Component_` CHAR(72) NOT NULL PRIMARY KEY `RemoveIniFile`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIRemoveIniFile>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `RemoveIniFile` (`RemoveIniFile`, `FileName`, `DirProperty`, `Section`, `Key`, `Value`, `Action`, `Component_`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", 8);
		for (auto& row : rows)
		{
			view->setString(0, row.removeIniFile);
			view->setString(1, row.fileName);
			view->setString(2, row.dirProperty ? row.dirProperty.value() : "");
			view->setString(3, row.section);
			view->setString(4, row.key);
			view->setString(5, row.value ? row.value.value() : "");
			view->setInteger(6, row.action);
			view->setString(7, row.component);
			view->execute();
		}
	}
};

class MSIRemoveRegistry
{
public:
	std::string removeRegistry;
	int root = 0;
	std::string key; // localizable
	std::optional<std::string> name; // localizable
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `RemoveRegistry` (`RemoveRegistry` CHAR(72) NOT NULL, `Root` SHORT NOT NULL, `Key` CHAR(255) NOT NULL LOCALIZABLE, `Name` CHAR(255) LOCALIZABLE, `Component_` CHAR(72) NOT NULL PRIMARY KEY `RemoveRegistry`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIRemoveRegistry>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `RemoveRegistry` (`RemoveRegistry`, `Root`, `Key`, `Name`, `Component_`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.removeRegistry);
			view->setInteger(1, row.root);
			view->setString(2, row.key);
			view->setString(3, row.name ? row.name.value() : "");
			view->setString(4, row.component);
			view->execute();
		}
	}
};

class MSIReserveCost
{
public:
	std::string reserveKey;
	std::string component;
	std::optional<std::string> reserveFolder;
	int reserveLocal = 0;
	int reserveSource = 0;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ReserveCost` (`ReserveKey` CHAR(72) NOT NULL, `Component_` CHAR(72) NOT NULL, `ReserveFolder` CHAR(72), `ReserveLocal` LONG NOT NULL, `ReserveSource` LONG NOT NULL PRIMARY KEY `ReserveKey`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIReserveCost>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ReserveCost` (`ReserveKey`, `Component_`, `ReserveFolder`, `ReserveLocal`, `ReserveSource`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.reserveKey);
			view->setString(1, row.component);
			view->setString(2, row.reserveFolder ? row.reserveFolder.value() : "");
			view->setInteger(3, row.reserveLocal);
			view->setInteger(4, row.reserveSource);
			view->execute();
		}
	}
};

class MSISFPCatalog
{
public:
	std::string sFPCatalog;
	MSIObject catalog;
	std::optional<std::string> dependency;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `SFPCatalog` (`SFPCatalog` CHAR(255) NOT NULL, `Catalog` OBJECT NOT NULL, `Dependency` LONGCHAR PRIMARY KEY `SFPCatalog`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSISFPCatalog>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `SFPCatalog` (`SFPCatalog`, `Catalog`, `Dependency`) VALUES(?, ?, ?)", 3);
		for (auto& row : rows)
		{
			view->setString(0, row.sFPCatalog);
			view->setStream(1, row.catalog.filename);
			view->setString(2, row.dependency ? row.dependency.value() : "");
			view->execute();
		}
	}
};

class MSISelfReg
{
public:
	std::string file;
	std::optional<int> cost;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `SelfReg` (`File_` CHAR(72) NOT NULL, `Cost` SHORT PRIMARY KEY `File_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSISelfReg>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `SelfReg` (`File_`, `Cost`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.file);
			view->setInteger(1, row.cost ? row.cost.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIServiceControl
{
public:
	std::string serviceControl;
	std::string name; // localizable
	int event = 0;
	std::optional<std::string> arguments; // localizable
	std::optional<int> wait;
	std::string component;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ServiceControl` (`ServiceControl` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL LOCALIZABLE, `Event` SHORT NOT NULL, `Arguments` CHAR(255) LOCALIZABLE, `Wait` SHORT, `Component_` CHAR(72) NOT NULL PRIMARY KEY `ServiceControl`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIServiceControl>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ServiceControl` (`ServiceControl`, `Name`, `Event`, `Arguments`, `Wait`, `Component_`) VALUES(?, ?, ?, ?, ?, ?)", 6);
		for (auto& row : rows)
		{
			view->setString(0, row.serviceControl);
			view->setString(1, row.name);
			view->setInteger(2, row.event);
			view->setString(3, row.arguments ? row.arguments.value() : "");
			view->setInteger(4, row.wait ? row.wait.value() : MSI_NULL_INTEGER);
			view->setString(5, row.component);
			view->execute();
		}
	}
};

class MSIServiceInstall
{
public:
	std::string serviceInstall;
	std::string name;
	std::optional<std::string> displayName; // localizable
	int serviceType = 0;
	int startType = 0;
	int errorControl = 0;
	std::optional<std::string> loadOrderGroup;
	std::optional<std::string> dependencies;
	std::optional<std::string> startName;
	std::optional<std::string> password;
	std::optional<std::string> arguments;
	std::string component;
	std::optional<std::string> description; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `ServiceInstall` (`ServiceInstall` CHAR(72) NOT NULL, `Name` CHAR(255) NOT NULL, `DisplayName` CHAR(255) LOCALIZABLE, `ServiceType` LONG NOT NULL, `StartType` LONG NOT NULL, `ErrorControl` LONG NOT NULL, `LoadOrderGroup` CHAR(255), `Dependencies` CHAR(255), `StartName` CHAR(255), `Password` CHAR(255), `Arguments` CHAR(255), `Component_` CHAR(72) NOT NULL, `Description` CHAR(255) LOCALIZABLE PRIMARY KEY `ServiceInstall`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIServiceInstall>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `ServiceInstall` (`ServiceInstall`, `Name`, `DisplayName`, `ServiceType`, `StartType`, `ErrorControl`, `LoadOrderGroup`, `Dependencies`, `StartName`, `Password`, `Arguments`, `Component_`, `Description`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 13);
		for (auto& row : rows)
		{
			view->setString(0, row.serviceInstall);
			view->setString(1, row.name);
			view->setString(2, row.displayName ? row.displayName.value() : "");
			view->setInteger(3, row.serviceType);
			view->setInteger(4, row.startType);
			view->setInteger(5, row.errorControl);
			view->setString(6, row.loadOrderGroup ? row.loadOrderGroup.value() : "");
			view->setString(7, row.dependencies ? row.dependencies.value() : "");
			view->setString(8, row.startName ? row.startName.value() : "");
			view->setString(9, row.password ? row.password.value() : "");
			view->setString(10, row.arguments ? row.arguments.value() : "");
			view->setString(11, row.component);
			view->setString(12, row.description ? row.description.value() : "");
			view->execute();
		}
	}
};

class MSIShortcut
{
public:
	std::string shortcut;
	std::string directory;
	std::string name; // localizable
	std::string component;
	std::string target;
	std::optional<std::string> arguments;
	std::optional<std::string> description; // localizable
	std::optional<int> hotkey;
	std::optional<std::string> icon;
	std::optional<int> iconIndex;
	std::optional<int> showCmd;
	std::optional<std::string> wkDir;
	std::optional<std::string> displayResourceDLL;
	std::optional<int> displayResourceId;
	std::optional<std::string> descriptionResourceDLL;
	std::optional<int> descriptionResourceId;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Shortcut` (`Shortcut` CHAR(72) NOT NULL, `Directory_` CHAR(72) NOT NULL, `Name` CHAR(128) NOT NULL LOCALIZABLE, `Component_` CHAR(72) NOT NULL, `Target` CHAR(72) NOT NULL, `Arguments` CHAR(255), `Description` CHAR(255) LOCALIZABLE, `Hotkey` SHORT, `Icon_` CHAR(72), `IconIndex` SHORT, `ShowCmd` SHORT, `WkDir` CHAR(72), `DisplayResourceDLL` CHAR(100), `DisplayResourceId` LONG, `DescriptionResourceDLL` CHAR(100), `DescriptionResourceId` LONG PRIMARY KEY `Shortcut`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIShortcut>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Shortcut` (`Shortcut`, `Directory_`, `Name`, `Component_`, `Target`, `Arguments`, `Description`, `Hotkey`, `Icon_`, `IconIndex`, `ShowCmd`, `WkDir`, `DisplayResourceDLL`, `DisplayResourceId`, `DescriptionResourceDLL`, `DescriptionResourceId`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 16);
		for (auto& row : rows)
		{
			view->setString(0, row.shortcut);
			view->setString(1, row.directory);
			view->setString(2, row.name);
			view->setString(3, row.component);
			view->setString(4, row.target);
			view->setString(5, row.arguments ? row.arguments.value() : "");
			view->setString(6, row.description ? row.description.value() : "");
			view->setInteger(7, row.hotkey ? row.hotkey.value() : MSI_NULL_INTEGER);
			view->setString(8, row.icon ? row.icon.value() : "");
			view->setInteger(9, row.iconIndex ? row.iconIndex.value() : MSI_NULL_INTEGER);
			view->setInteger(10, row.showCmd ? row.showCmd.value() : MSI_NULL_INTEGER);
			view->setString(11, row.wkDir ? row.wkDir.value() : "");
			view->setString(12, row.displayResourceDLL ? row.displayResourceDLL.value() : "");
			view->setInteger(13, row.displayResourceId ? row.displayResourceId.value() : MSI_NULL_INTEGER);
			view->setString(14, row.descriptionResourceDLL ? row.descriptionResourceDLL.value() : "");
			view->setInteger(15, row.descriptionResourceId ? row.descriptionResourceId.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSISignature
{
public:
	std::string signature;
	std::string fileName;
	std::optional<std::string> minVersion;
	std::optional<std::string> maxVersion;
	std::optional<int> minSize;
	std::optional<int> maxSize;
	std::optional<int> minDate;
	std::optional<int> maxDate;
	std::optional<std::string> languages;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Signature` (`Signature` CHAR(72) NOT NULL, `FileName` CHAR(255) NOT NULL, `MinVersion` CHAR(20), `MaxVersion` CHAR(20), `MinSize` LONG, `MaxSize` LONG, `MinDate` LONG, `MaxDate` LONG, `Languages` CHAR(255) PRIMARY KEY `Signature`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSISignature>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Signature` (`Signature`, `FileName`, `MinVersion`, `MaxVersion`, `MinSize`, `MaxSize`, `MinDate`, `MaxDate`, `Languages`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", 9);
		for (auto& row : rows)
		{
			view->setString(0, row.signature);
			view->setString(1, row.fileName);
			view->setString(2, row.minVersion ? row.minVersion.value() : "");
			view->setString(3, row.maxVersion ? row.maxVersion.value() : "");
			view->setInteger(4, row.minSize ? row.minSize.value() : MSI_NULL_INTEGER);
			view->setInteger(5, row.maxSize ? row.maxSize.value() : MSI_NULL_INTEGER);
			view->setInteger(6, row.minDate ? row.minDate.value() : MSI_NULL_INTEGER);
			view->setInteger(7, row.maxDate ? row.maxDate.value() : MSI_NULL_INTEGER);
			view->setString(8, row.languages ? row.languages.value() : "");
			view->execute();
		}
	}
};

class MSITextStyle
{
public:
	std::string textStyle;
	std::string faceName;
	int size = 0;
	std::optional<int> color;
	std::optional<int> styleBits;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `TextStyle` (`TextStyle` CHAR(72) NOT NULL, `FaceName` CHAR(32) NOT NULL, `Size` SHORT NOT NULL, `Color` LONG, `StyleBits` SHORT PRIMARY KEY `TextStyle`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSITextStyle>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `TextStyle` (`TextStyle`, `FaceName`, `Size`, `Color`, `StyleBits`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.textStyle);
			view->setString(1, row.faceName);
			view->setInteger(2, row.size);
			view->setInteger(3, row.color ? row.color.value() : MSI_NULL_INTEGER);
			view->setInteger(4, row.styleBits ? row.styleBits.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSITypeLib
{
public:
	std::string libID;
	int language = 0;
	std::string component;
	std::optional<int> version;
	std::optional<std::string> description; // localizable
	std::optional<std::string> directory;
	std::string feature;
	std::optional<int> cost;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `TypeLib` (`LibID` CHAR(38) NOT NULL, `Language` SHORT NOT NULL, `Component_` CHAR(72) NOT NULL, `Version` LONG, `Description` CHAR(128) LOCALIZABLE, `Directory_` CHAR(72), `Feature_` CHAR(38) NOT NULL, `Cost` LONG PRIMARY KEY `LibID`, `Language`, `Component_`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSITypeLib>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `TypeLib` (`LibID`, `Language`, `Component_`, `Version`, `Description`, `Directory_`, `Feature_`, `Cost`) VALUES(?, ?, ?, ?, ?, ?, ?, ?)", 8);
		for (auto& row : rows)
		{
			view->setString(0, row.libID);
			view->setInteger(1, row.language);
			view->setString(2, row.component);
			view->setInteger(3, row.version ? row.version.value() : MSI_NULL_INTEGER);
			view->setString(4, row.description ? row.description.value() : "");
			view->setString(5, row.directory ? row.directory.value() : "");
			view->setString(6, row.feature);
			view->setInteger(7, row.cost ? row.cost.value() : MSI_NULL_INTEGER);
			view->execute();
		}
	}
};

class MSIUIText
{
public:
	std::string key;
	std::optional<std::string> text; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `UIText` (`Key` CHAR(72) NOT NULL, `Text` CHAR(255) LOCALIZABLE PRIMARY KEY `Key`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIUIText>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `UIText` (`Key`, `Text`) VALUES(?, ?)", 2);
		for (auto& row : rows)
		{
			view->setString(0, row.key);
			view->setString(1, row.text ? row.text.value() : "");
			view->execute();
		}
	}
};

class MSIUpgrade
{
public:
	std::string upgradeCode;
	std::optional<std::string> versionMin;
	std::optional<std::string> versionMax;
	std::optional<std::string> language;
	int attributes = 0;
	std::optional<std::string> remove;
	std::string actionProperty;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Upgrade` (`UpgradeCode` CHAR(38) NOT NULL, `VersionMin` CHAR(20), `VersionMax` CHAR(20), `Language` CHAR(255), `Attributes` LONG NOT NULL, `Remove` CHAR(255), `ActionProperty` CHAR(72) NOT NULL PRIMARY KEY `UpgradeCode`, `VersionMin`, `VersionMax`, `Language`, `Attributes`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIUpgrade>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Upgrade` (`UpgradeCode`, `VersionMin`, `VersionMax`, `Language`, `Attributes`, `Remove`, `ActionProperty`) VALUES(?, ?, ?, ?, ?, ?, ?)", 7);
		for (auto& row : rows)
		{
			view->setString(0, row.upgradeCode);
			view->setString(1, row.versionMin ? row.versionMin.value() : "");
			view->setString(2, row.versionMax ? row.versionMax.value() : "");
			view->setString(3, row.language ? row.language.value() : "");
			view->setInteger(4, row.attributes);
			view->setString(5, row.remove ? row.remove.value() : "");
			view->setString(6, row.actionProperty);
			view->execute();
		}
	}
};

class MSIVerb
{
public:
	std::string extension;
	std::string verb;
	std::optional<int> sequence;
	std::optional<std::string> command; // localizable
	std::optional<std::string> argument; // localizable

	static std::string createTableSql() 
	{
		return "CREATE TABLE `Verb` (`Extension_` CHAR(255) NOT NULL, `Verb` CHAR(32) NOT NULL, `Sequence` SHORT, `Command` CHAR(255) LOCALIZABLE, `Argument` CHAR(255) LOCALIZABLE PRIMARY KEY `Extension_`, `Verb`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIVerb>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `Verb` (`Extension_`, `Verb`, `Sequence`, `Command`, `Argument`) VALUES(?, ?, ?, ?, ?)", 5);
		for (auto& row : rows)
		{
			view->setString(0, row.extension);
			view->setString(1, row.verb);
			view->setInteger(2, row.sequence ? row.sequence.value() : MSI_NULL_INTEGER);
			view->setString(3, row.command ? row.command.value() : "");
			view->setString(4, row.argument ? row.argument.value() : "");
			view->execute();
		}
	}
};

class MSIValidation
{
public:
	std::string table;
	std::string column;
	std::string nullable;
	std::optional<int> minValue;
	std::optional<int> maxValue;
	std::optional<std::string> keyTable;
	std::optional<int> keyColumn;
	std::optional<std::string> category;
	std::optional<std::string> set;
	std::optional<std::string> description;

	static std::string createTableSql() 
	{
		return "CREATE TABLE `_Validation` (`Table` CHAR(32) NOT NULL, `Column` CHAR(32) NOT NULL, `Nullable` CHAR(4) NOT NULL, `MinValue` LONG, `MaxValue` LONG, `KeyTable` CHAR(255), `KeyColumn` SHORT, `Category` CHAR(32), `Set` CHAR(255), `Description` CHAR(255) PRIMARY KEY `Table`, `Column`)";
	}

	static void createTable(MSIDatabase* db, const std::vector<MSIValidation>& rows)
	{
		db->createView(createTableSql(), 0)->execute();
		auto view = db->createView("INSERT INTO `_Validation` (`Table`, `Column`, `Nullable`, `MinValue`, `MaxValue`, `KeyTable`, `KeyColumn`, `Category`, `Set`, `Description`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 10);
		for (auto& row : rows)
		{
			view->setString(0, row.table);
			view->setString(1, row.column);
			view->setString(2, row.nullable);
			view->setInteger(3, row.minValue ? row.minValue.value() : MSI_NULL_INTEGER);
			view->setInteger(4, row.maxValue ? row.maxValue.value() : MSI_NULL_INTEGER);
			view->setString(5, row.keyTable ? row.keyTable.value() : "");
			view->setInteger(6, row.keyColumn ? row.keyColumn.value() : MSI_NULL_INTEGER);
			view->setString(7, row.category ? row.category.value() : "");
			view->setString(8, row.set ? row.set.value() : "");
			view->setString(9, row.description ? row.description.value() : "");
			view->execute();
		}
	}
};

